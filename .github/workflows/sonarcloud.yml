name: SonarCloud

on:
  push:
    branches:
      - staging
      - main

  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, analyze, and test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: subscription

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is up and running"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          if ! pg_isready -h localhost -p 5432 -U postgres; then
            echo "PostgreSQL failed to start" && exit 1
          fi

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/subscription
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: password
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          chmod +x ./gradlew
          ./gradlew build sonar --info
